'''
	Each new term in the Fibonacci squence is generated by adding the previous two terms. By starting with 1 and 2,
	the first 10 terms will be:
		1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

	
	By considering the terms in the Fibonacci sequence whose values do not exceed four million,
	find the sum of the even-valued terms.
'''

# --------------------- WHAT DO WE NEED TO DO
# sum of all numbers - sum
# largest number in sequence must be less than 4 million - for / while num less than 4 mil
# only the even valued terms - mod of 2
# fib sequence - two previous numbers add to give next number

# --------------------- THE SOLUTION

'''
a = 1;
b = 2;
fibTotal = 2; # 1 + 2 - but only 2 is even
print('first 10 in sequence')
print(a)
print(b)
print(b,'--- even')
# for x in range(0,8):
while b < 4000000:
	c = a + b
	print(c)
	if c % 2 == 0:
		print (c, '--- even')
		fibTotal += c
	a = b
	b = c
print('fib total: ',fibTotal)
'''

# -------------------- BEST ONLINE SOLUTION

'''
	s, x, y =  0, 1, 2
	while y < 4000000:
	   if y % 2 == 0:
	      s += y
	   x, y = y, x + y
	print(s)
'''
# appears you can do multiple variable declarations on a single line, just separated by a comma


# -------------------- THE UPGRADED SOLUTION / PROJECT VERSION

import argparse
import logging

parser = argparse.ArgumentParser(description='Will find the sum of all even Fibonnaci numbers up to number provided.')
parser.add_argument('endRange', metavar='endRange', type=int, nargs='?', 
                    help='an integer for the end of the range')
parser.add_argument("-log", "--log", default="warning", help=("Provide logging level. "
        "Example --log debug', default='warning'"))
args = parser.parse_args()

# set your logging level, take argument from user to define what level, otherwise it will default to warn
levels = {
    'critical': logging.CRITICAL,
    'error': logging.ERROR,
    'warn': logging.WARNING,
    'warning': logging.WARNING,
    'info': logging.INFO,
    'debug': logging.DEBUG
}
level = levels.get(args.log.lower())
logging.basicConfig(level=level)

if not args.endRange:
        print('Missing arguments, for correct usage see -h or --help',
		'Logging can be enabled, for correct usage see -log or --log')
        exit()

a, b, e, s = 1, 2, args.endRange, 0
logging.debug('fibonnaci numbers')
logging.debug(a)
while b < e:
	logging.debug(b)
	if b % 2 == 0:
		logging.debug('%s --- even', b) # %var how reference in string, var included other arg, must convert to string
		s += b
	a, b = b, a + b
print('Fib total: ',s)
